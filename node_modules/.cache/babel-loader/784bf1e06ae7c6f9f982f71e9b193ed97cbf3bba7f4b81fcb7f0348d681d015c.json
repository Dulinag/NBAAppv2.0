{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Desktop\\\\Bennetts-Port\\\\crypto-fees\\\\src\\\\ProtocolGrid.js\";\nimport * as React from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProtocolGrid() {\n  const fetchApi = () => {\n    axios.get('https://cryptofees.info/api/v1/fees'), null, {\n      params: {\n        'metadata': false\n      }\n    }.then(res => {\n      console.log(res.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchApi(),\n      children: \"Click me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\n// function createData(name, calories, fat, carbs, protein, price) {\n//   return {\n//     name,\n//     calories,\n//     fat,\n//     carbs,\n//     protein,\n//     price,\n//     history: [\n//       {\n//         date: '2020-01-05',\n//         customerId: '11091700',\n//         amount: 3,\n//       },\n//       {\n//         date: '2020-01-02',\n//         customerId: 'Anonymous',\n//         amount: 1,\n//       },\n//     ],\n//   };\n// }\n\n// function Row(props) {\n//   const { row } = props;\n//   const [open, setOpen] = React.useState(false);\n\n//   return (\n//     <React.Fragment>\n//       <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\n//         <TableCell>\n//           <IconButton\n//             aria-label=\"expand row\"\n//             size=\"small\"\n//             onClick={() => setOpen(!open)}\n//           >\n//             {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n//           </IconButton>\n//         </TableCell>\n//         <TableCell component=\"th\" scope=\"row\">\n//           {row.name}\n//         </TableCell>\n//         <TableCell align=\"right\">{row.calories}</TableCell>\n//         <TableCell align=\"right\">{row.fat}</TableCell>\n//         <TableCell align=\"right\">{row.carbs}</TableCell>\n//         <TableCell align=\"right\">{row.protein}</TableCell>\n//       </TableRow>\n//       <TableRow>\n//         <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n//           <Collapse in={open} timeout=\"auto\" unmountOnExit>\n//             <Box sx={{ margin: 1 }}>\n//               <Typography variant=\"h6\" gutterBottom component=\"div\">\n//                 History\n//               </Typography>\n//               <Table size=\"small\" aria-label=\"purchases\">\n//                 <TableHead>\n//                   <TableRow>\n//                     <TableCell>Date</TableCell>\n//                     <TableCell>Customer</TableCell>\n//                     <TableCell align=\"right\">Amount</TableCell>\n//                     <TableCell align=\"right\">Total price ($)</TableCell>\n//                   </TableRow>\n//                 </TableHead>\n//                 <TableBody>\n//                   {row.history.map((historyRow) => (\n//                     <TableRow key={historyRow.date}>\n//                       <TableCell component=\"th\" scope=\"row\">\n//                         {historyRow.date}\n//                       </TableCell>\n//                       <TableCell>{historyRow.customerId}</TableCell>\n//                       <TableCell align=\"right\">{historyRow.amount}</TableCell>\n//                       <TableCell align=\"right\">\n//                         {Math.round(historyRow.amount * row.price * 100) / 100}\n//                       </TableCell>\n//                     </TableRow>\n//                   ))}\n//                 </TableBody>\n//               </Table>\n//             </Box>\n//           </Collapse>\n//         </TableCell>\n//       </TableRow>\n//     </React.Fragment>\n//   );\n// }\n\n// Row.propTypes = {\n//   row: PropTypes.shape({\n//     calories: PropTypes.number.isRequired,\n//     carbs: PropTypes.number.isRequired,\n//     fat: PropTypes.number.isRequired,\n//     history: PropTypes.arrayOf(\n//       PropTypes.shape({\n//         amount: PropTypes.number.isRequired,\n//         customerId: PropTypes.string.isRequired,\n//         date: PropTypes.string.isRequired,\n//       }),\n//     ).isRequired,\n//     name: PropTypes.string.isRequired,\n//     price: PropTypes.number.isRequired,\n//     protein: PropTypes.number.isRequired,\n//   }).isRequired,\n// };\n\n// const rows = [\n//   createData('Frozen yoghurt', 159, 6.0, 24, 4.0, 3.99),\n//   createData('Ice cream sandwich', 237, 9.0, 37, 4.3, 4.99),\n//   createData('Eclair', 262, 16.0, 24, 6.0, 3.79),\n//   createData('Cupcake', 305, 3.7, 67, 4.3, 2.5),\n//   createData('Gingerbread', 356, 16.0, 49, 3.9, 1.5),\n// ];\n\n// export default function CollapsibleTable() {\n//   return (\n//     <TableContainer component={Paper}>\n//       <Table aria-label=\"collapsible table\">\n//         <TableHead>\n//           <TableRow>\n//             <TableCell />\n//             <TableCell>Name</TableCell>\n//             <TableCell align=\"right\">1 Day Fees</TableCell>\n//             <TableCell align=\"right\">y Day AVg. Fees</TableCell>\n//           </TableRow>\n//         </TableHead>\n//         <TableBody>\n//           {rows.map((row) => (\n//             <Row key={row.name} row={row} />\n//           ))}\n//         </TableBody>\n//       </Table>\n//     </TableContainer>\n//   );\n// }\n_c = ProtocolGrid;\nvar _c;\n$RefreshReg$(_c, \"ProtocolGrid\");","map":{"version":3,"names":["React","axios","ProtocolGrid","fetchApi","get","params","then","res","console","log","data","catch","err"],"sources":["C:/Users/Owner/Desktop/Bennetts-Port/crypto-fees/src/ProtocolGrid.js"],"sourcesContent":["import * as React from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n\r\nexport default function ProtocolGrid() {\r\n\r\n\r\n    const fetchApi = () => {\r\n        axios.get('https://cryptofees.info/api/v1/fees'), null,\r\n        {params: {\r\n          'metadata': false\r\n        }}\r\n        .then((res) => {\r\n            console.log(res.data)\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n  return (\r\n    <div>\r\n       <button onClick={fetchApi()}>Click me</button>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// function createData(name, calories, fat, carbs, protein, price) {\r\n//   return {\r\n//     name,\r\n//     calories,\r\n//     fat,\r\n//     carbs,\r\n//     protein,\r\n//     price,\r\n//     history: [\r\n//       {\r\n//         date: '2020-01-05',\r\n//         customerId: '11091700',\r\n//         amount: 3,\r\n//       },\r\n//       {\r\n//         date: '2020-01-02',\r\n//         customerId: 'Anonymous',\r\n//         amount: 1,\r\n//       },\r\n//     ],\r\n//   };\r\n// }\r\n\r\n// function Row(props) {\r\n//   const { row } = props;\r\n//   const [open, setOpen] = React.useState(false);\r\n\r\n//   return (\r\n//     <React.Fragment>\r\n//       <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\r\n//         <TableCell>\r\n//           <IconButton\r\n//             aria-label=\"expand row\"\r\n//             size=\"small\"\r\n//             onClick={() => setOpen(!open)}\r\n//           >\r\n//             {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n//           </IconButton>\r\n//         </TableCell>\r\n//         <TableCell component=\"th\" scope=\"row\">\r\n//           {row.name}\r\n//         </TableCell>\r\n//         <TableCell align=\"right\">{row.calories}</TableCell>\r\n//         <TableCell align=\"right\">{row.fat}</TableCell>\r\n//         <TableCell align=\"right\">{row.carbs}</TableCell>\r\n//         <TableCell align=\"right\">{row.protein}</TableCell>\r\n//       </TableRow>\r\n//       <TableRow>\r\n//         <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n//           <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n//             <Box sx={{ margin: 1 }}>\r\n//               <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n//                 History\r\n//               </Typography>\r\n//               <Table size=\"small\" aria-label=\"purchases\">\r\n//                 <TableHead>\r\n//                   <TableRow>\r\n//                     <TableCell>Date</TableCell>\r\n//                     <TableCell>Customer</TableCell>\r\n//                     <TableCell align=\"right\">Amount</TableCell>\r\n//                     <TableCell align=\"right\">Total price ($)</TableCell>\r\n//                   </TableRow>\r\n//                 </TableHead>\r\n//                 <TableBody>\r\n//                   {row.history.map((historyRow) => (\r\n//                     <TableRow key={historyRow.date}>\r\n//                       <TableCell component=\"th\" scope=\"row\">\r\n//                         {historyRow.date}\r\n//                       </TableCell>\r\n//                       <TableCell>{historyRow.customerId}</TableCell>\r\n//                       <TableCell align=\"right\">{historyRow.amount}</TableCell>\r\n//                       <TableCell align=\"right\">\r\n//                         {Math.round(historyRow.amount * row.price * 100) / 100}\r\n//                       </TableCell>\r\n//                     </TableRow>\r\n//                   ))}\r\n//                 </TableBody>\r\n//               </Table>\r\n//             </Box>\r\n//           </Collapse>\r\n//         </TableCell>\r\n//       </TableRow>\r\n//     </React.Fragment>\r\n//   );\r\n// }\r\n\r\n// Row.propTypes = {\r\n//   row: PropTypes.shape({\r\n//     calories: PropTypes.number.isRequired,\r\n//     carbs: PropTypes.number.isRequired,\r\n//     fat: PropTypes.number.isRequired,\r\n//     history: PropTypes.arrayOf(\r\n//       PropTypes.shape({\r\n//         amount: PropTypes.number.isRequired,\r\n//         customerId: PropTypes.string.isRequired,\r\n//         date: PropTypes.string.isRequired,\r\n//       }),\r\n//     ).isRequired,\r\n//     name: PropTypes.string.isRequired,\r\n//     price: PropTypes.number.isRequired,\r\n//     protein: PropTypes.number.isRequired,\r\n//   }).isRequired,\r\n// };\r\n\r\n// const rows = [\r\n//   createData('Frozen yoghurt', 159, 6.0, 24, 4.0, 3.99),\r\n//   createData('Ice cream sandwich', 237, 9.0, 37, 4.3, 4.99),\r\n//   createData('Eclair', 262, 16.0, 24, 6.0, 3.79),\r\n//   createData('Cupcake', 305, 3.7, 67, 4.3, 2.5),\r\n//   createData('Gingerbread', 356, 16.0, 49, 3.9, 1.5),\r\n// ];\r\n\r\n// export default function CollapsibleTable() {\r\n//   return (\r\n//     <TableContainer component={Paper}>\r\n//       <Table aria-label=\"collapsible table\">\r\n//         <TableHead>\r\n//           <TableRow>\r\n//             <TableCell />\r\n//             <TableCell>Name</TableCell>\r\n//             <TableCell align=\"right\">1 Day Fees</TableCell>\r\n//             <TableCell align=\"right\">y Day AVg. Fees</TableCell>\r\n//           </TableRow>\r\n//         </TableHead>\r\n//         <TableBody>\r\n//           {rows.map((row) => (\r\n//             <Row key={row.name} row={row} />\r\n//           ))}\r\n//         </TableBody>\r\n//       </Table>\r\n//     </TableContainer>\r\n//   );\r\n// }"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,KAAK,MAAM,OAAO;AAAC;AAK1B,eAAe,SAASC,YAAY,GAAG;EAGnC,MAAMC,QAAQ,GAAG,MAAM;IACnBF,KAAK,CAACG,GAAG,CAAC,qCAAqC,CAAC,EAAE,IAAI,EACtD;MAACC,MAAM,EAAE;QACP,UAAU,EAAE;MACd;IAAC,CAAC,CACDC,IAAI,CAAEC,GAAG,IAAK;MACXC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,IAAI,CAAC;IACzB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAK;MACZJ,OAAO,CAACC,GAAG,CAACG,GAAG,CAAC;IACpB,CAAC,CAAC;EACN,CAAC;EAEH,oBACE;IAAA,uBACG;MAAQ,OAAO,EAAET,QAAQ,EAAG;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAkB;IAAA;IAAA;IAAA;EAAA,QAC3C;AAEV;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,KAjKwBD,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}